# app.rb
# gem install sinatra
# gem install sinatra-contrib

require('sinatra')
require('sinatra/contrib/all') if development?
# sinatra-contrib allows us to automatically restart the sinatra server whenever a change is made and the ruby file is saved.


get('/hello') do
  p 'HI!'
  name = 'Lorna'
  p "Hello #{name}"
end

# get() is an http method
# get() method takes a string as a parameter, and a block.
# get('webpage')  i.e. route = method(path)
# do
# action this code when a get request is sent to that particular location
# whatever the final action in the block is, becomes the body of the html generated by the request.
# If you want it to be displayed directly, it has to return a string.
# the fact that we include p 'string' means nothing to Sinatra
# end


# task:
# Make a get route called "roll-die" and use Ruby code to return a random number between 1 and 6

get('/roll-die') do
  rand(1..6).to_s()
  # return "#{rand(1..6)}"
end



# Can get detailed info from url which isn't just the route...
# can thus respond to user input - add route parameters :var_name

get('/hello/:first/:last') do
  # i.e. /hello/anything/anythingelse

  p params.to_s()
  # params is the user input, and this will give us the actual hash created by Sinatra with everything as a string [keys and values both]
  # result is:  {'captures' => [],'first' => 'anything', 'last' => 'anythingelse'}
  # don't use 'captures' as this is a reserved word

  # "Hello #{params['first']} #{params['last']}!"
  "Hello #{params[:first]} #{params[:last]}!"

  # both params['first'] and params[:first] work - it's not actually a hash, it's a Sinatra hash which automatically converts a symbol to a string.

end


get('/friends/:number') do
  friends = ['Monica', 'Joey', 'Chandler', 'Phoebe', 'Rachel', 'Ross']

  # must have the /path/:parameter
  # care, in ruby you can count backwards in an array, and nil.to_i returns 0, so you get unexpected output!

  index = params[:number].to_i() - 1

  friends[index]

end

# if you use the same path, sinatra can't tell what you've called the variable - it just knows /friends/WHATEVER_THE_USER_ENTERS
# if the method above is live, then the method below will never be reached
# sinatra will choose the first route specified, starting at the top of the file....


get('/friends/:name') do

  friends = ['Monica', 'Joey', 'Chandler', 'Phoebe', 'Rachel', 'Ross']
  if friends.include?(params[:name])
    "Yes! That person is a Friend."
  else
    "No, I don't know a #{params[:name]}"
  end

end




# app.rb
